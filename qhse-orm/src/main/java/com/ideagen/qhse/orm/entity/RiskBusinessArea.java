package com.ideagen.qhse.orm.entity;

import java.sql.Timestamp;

import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.Table;

/**
 * RiskBusinessArea generated by hbm2java
 */
@Entity
@Table(name = "risk_business_area")
public class RiskBusinessArea extends AbstractNamedEntity {

	private Boolean active;
	//TODO
	/*private Set<RiskObjective> riskObjectives = new HashSet<RiskObjective>(0);
	private Set<ChangeProgramme> changeProgrammes = new HashSet<ChangeProgramme>(0);
	private Set<Audit> audits = new HashSet<Audit>(0);
	private Set<AuditProgramme> auditProgrammes = new HashSet<AuditProgramme>(0);
	private Set<ChangeAssessment> changeAssessments = new HashSet<ChangeAssessment>(0);
	private Set<ChangePlan> changePlans = new HashSet<ChangePlan>(0);
	private Set<AudRecurringAudit> audRecurringAudits = new HashSet<AudRecurringAudit>(0);
	private Set<RiskAssessment> riskAssessments = new HashSet<RiskAssessment>(0);
	private Set<RiskManagementProgramme> riskManagementProgrammes = new HashSet<RiskManagementProgramme>(0);
	private Set<ProfileChecklistTask> profileChecklistTasks = new HashSet<ProfileChecklistTask>(0);
	private Set<MeasurementReadingPoint> measurementReadingPoints = new HashSet<MeasurementReadingPoint>(0);
	private Set<ActionTask> actionTasks = new HashSet<ActionTask>(0);
	private Set<RiskTask> riskTasks = new HashSet<RiskTask>(0);
	private Set<Incident> incidents = new HashSet<Incident>(0);
	private Set<HazardTask> hazardTasks = new HashSet<HazardTask>(0);
	private Set<RiskTemplate> riskTemplates = new HashSet<RiskTemplate>(0);
	private Set<Action> actions = new HashSet<Action>(0);
	private Set<RiskCategory> riskCategories = new HashSet<RiskCategory>(0);
	private Set<DocControlDoc> docControlDocs = new HashSet<DocControlDoc>(0);
	private Set<MeasurementReading> measurementReadings = new HashSet<MeasurementReading>(0);*/

	public RiskBusinessArea() {
	}
	
	@Column(name = "active")
	public Boolean getActive() {
		return this.active;
	}

	public void setActive(Boolean active) {
		this.active = active;
	}

	/*@ManyToMany(fetch = FetchType.LAZY)
	@JoinTable(name = "risk_objective_business_area", catalog = "qpulse_hes_demo", joinColumns = {
			@JoinColumn(name = "business_area_id", nullable = false, updatable = false) }, inverseJoinColumns = {
					@JoinColumn(name = "objective_id", nullable = false, updatable = false) })
	public Set<RiskObjective> getRiskObjectives() {
		return this.riskObjectives;
	}

	public void setRiskObjectives(Set<RiskObjective> riskObjectives) {
		this.riskObjectives = riskObjectives;
	}

	@ManyToMany(fetch = FetchType.LAZY)
	@JoinTable(name = "change_programme_business_area", catalog = "qpulse_hes_demo", joinColumns = {
			@JoinColumn(name = "business_area_id", nullable = false, updatable = false) }, inverseJoinColumns = {
					@JoinColumn(name = "change_programme_id", nullable = false, updatable = false) })
	public Set<ChangeProgramme> getChangeProgrammes() {
		return this.changeProgrammes;
	}

	public void setChangeProgrammes(Set<ChangeProgramme> changeProgrammes) {
		this.changeProgrammes = changeProgrammes;
	}

	@ManyToMany(fetch = FetchType.LAZY)
	@JoinTable(name = "audit_business_area", catalog = "qpulse_hes_demo", joinColumns = {
			@JoinColumn(name = "business_area_id", nullable = false, updatable = false) }, inverseJoinColumns = {
					@JoinColumn(name = "audit_id", nullable = false, updatable = false) })
	public Set<Audit> getAudits() {
		return this.audits;
	}

	public void setAudits(Set<Audit> audits) {
		this.audits = audits;
	}

	@ManyToMany(fetch = FetchType.LAZY)
	@JoinTable(name = "audit_programme_business_area", catalog = "qpulse_hes_demo", joinColumns = {
			@JoinColumn(name = "business_area_id", nullable = false, updatable = false) }, inverseJoinColumns = {
					@JoinColumn(name = "audit_programme_id", nullable = false, updatable = false) })
	public Set<AuditProgramme> getAuditProgrammes() {
		return this.auditProgrammes;
	}

	public void setAuditProgrammes(Set<AuditProgramme> auditProgrammes) {
		this.auditProgrammes = auditProgrammes;
	}

	@ManyToMany(fetch = FetchType.LAZY)
	@JoinTable(name = "change_assessment_business_area", catalog = "qpulse_hes_demo", joinColumns = {
			@JoinColumn(name = "business_area_id", nullable = false, updatable = false) }, inverseJoinColumns = {
					@JoinColumn(name = "change_assessment_id", nullable = false, updatable = false) })
	public Set<ChangeAssessment> getChangeAssessments() {
		return this.changeAssessments;
	}

	public void setChangeAssessments(Set<ChangeAssessment> changeAssessments) {
		this.changeAssessments = changeAssessments;
	}

	@ManyToMany(fetch = FetchType.LAZY)
	@JoinTable(name = "change_plan_business_area", catalog = "qpulse_hes_demo", joinColumns = {
			@JoinColumn(name = "business_area_id", nullable = false, updatable = false) }, inverseJoinColumns = {
					@JoinColumn(name = "change_plan_id", nullable = false, updatable = false) })
	public Set<ChangePlan> getChangePlans() {
		return this.changePlans;
	}

	public void setChangePlans(Set<ChangePlan> changePlans) {
		this.changePlans = changePlans;
	}

	@ManyToMany(fetch = FetchType.LAZY)
	@JoinTable(name = "audit_recurring_business_area", catalog = "qpulse_hes_demo", joinColumns = {
			@JoinColumn(name = "business_area_id", nullable = false, updatable = false) }, inverseJoinColumns = {
					@JoinColumn(name = "audit_recurring_id", nullable = false, updatable = false) })
	public Set<AudRecurringAudit> getAudRecurringAudits() {
		return this.audRecurringAudits;
	}

	public void setAudRecurringAudits(Set<AudRecurringAudit> audRecurringAudits) {
		this.audRecurringAudits = audRecurringAudits;
	}

	@ManyToMany(fetch = FetchType.LAZY)
	@JoinTable(name = "risk_assessment_business_area", catalog = "qpulse_hes_demo", joinColumns = {
			@JoinColumn(name = "business_area_id", nullable = false, updatable = false) }, inverseJoinColumns = {
					@JoinColumn(name = "assessment_id", nullable = false, updatable = false) })
	public Set<RiskAssessment> getRiskAssessments() {
		return this.riskAssessments;
	}

	public void setRiskAssessments(Set<RiskAssessment> riskAssessments) {
		this.riskAssessments = riskAssessments;
	}

	@ManyToMany(fetch = FetchType.LAZY)
	@JoinTable(name = "risk_management_programme_business_area", catalog = "qpulse_hes_demo", joinColumns = {
			@JoinColumn(name = "business_area_id", nullable = false, updatable = false) }, inverseJoinColumns = {
					@JoinColumn(name = "management_programme_id", nullable = false, updatable = false) })
	public Set<RiskManagementProgramme> getRiskManagementProgrammes() {
		return this.riskManagementProgrammes;
	}

	public void setRiskManagementProgrammes(Set<RiskManagementProgramme> riskManagementProgrammes) {
		this.riskManagementProgrammes = riskManagementProgrammes;
	}

	@ManyToMany(fetch = FetchType.LAZY)
	@JoinTable(name = "profile_checklist_task_business_area", catalog = "qpulse_hes_demo", joinColumns = {
			@JoinColumn(name = "business_area_id", nullable = false, updatable = false) }, inverseJoinColumns = {
					@JoinColumn(name = "profile_checklist_task_id", nullable = false, updatable = false) })
	public Set<ProfileChecklistTask> getProfileChecklistTasks() {
		return this.profileChecklistTasks;
	}

	public void setProfileChecklistTasks(Set<ProfileChecklistTask> profileChecklistTasks) {
		this.profileChecklistTasks = profileChecklistTasks;
	}

	@ManyToMany(fetch = FetchType.LAZY)
	@JoinTable(name = "reading_point_business_area", catalog = "qpulse_hes_demo", joinColumns = {
			@JoinColumn(name = "business_area_id", nullable = false, updatable = false) }, inverseJoinColumns = {
					@JoinColumn(name = "reading_point_id", nullable = false, updatable = false) })
	public Set<MeasurementReadingPoint> getMeasurementReadingPoints() {
		return this.measurementReadingPoints;
	}

	public void setMeasurementReadingPoints(Set<MeasurementReadingPoint> measurementReadingPoints) {
		this.measurementReadingPoints = measurementReadingPoints;
	}

	@ManyToMany(fetch = FetchType.LAZY)
	@JoinTable(name = "action_task_business_area", catalog = "qpulse_hes_demo", joinColumns = {
			@JoinColumn(name = "business_area_id", nullable = false, updatable = false) }, inverseJoinColumns = {
					@JoinColumn(name = "action_task_id", nullable = false, updatable = false) })
	public Set<ActionTask> getActionTasks() {
		return this.actionTasks;
	}

	public void setActionTasks(Set<ActionTask> actionTasks) {
		this.actionTasks = actionTasks;
	}

	@ManyToMany(fetch = FetchType.LAZY)
	@JoinTable(name = "risk_task_business_area", catalog = "qpulse_hes_demo", joinColumns = {
			@JoinColumn(name = "business_area_id", nullable = false, updatable = false) }, inverseJoinColumns = {
					@JoinColumn(name = "risk_task_id", nullable = false, updatable = false) })
	public Set<RiskTask> getRiskTasks() {
		return this.riskTasks;
	}

	public void setRiskTasks(Set<RiskTask> riskTasks) {
		this.riskTasks = riskTasks;
	}

	@ManyToMany(fetch = FetchType.LAZY)
	@JoinTable(name = "incident_business_area", catalog = "qpulse_hes_demo", joinColumns = {
			@JoinColumn(name = "business_area_id", nullable = false, updatable = false) }, inverseJoinColumns = {
					@JoinColumn(name = "incident_id", nullable = false, updatable = false) })
	public Set<Incident> getIncidents() {
		return this.incidents;
	}

	public void setIncidents(Set<Incident> incidents) {
		this.incidents = incidents;
	}

	@ManyToMany(fetch = FetchType.LAZY)
	@JoinTable(name = "hazard_task_business_area", catalog = "qpulse_hes_demo", joinColumns = {
			@JoinColumn(name = "business_area_id", nullable = false, updatable = false) }, inverseJoinColumns = {
					@JoinColumn(name = "hazard_task_id", nullable = false, updatable = false) })
	public Set<HazardTask> getHazardTasks() {
		return this.hazardTasks;
	}

	public void setHazardTasks(Set<HazardTask> hazardTasks) {
		this.hazardTasks = hazardTasks;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "riskBusinessArea")
	public Set<RiskTemplate> getRiskTemplates() {
		return this.riskTemplates;
	}

	public void setRiskTemplates(Set<RiskTemplate> riskTemplates) {
		this.riskTemplates = riskTemplates;
	}

	@ManyToMany(fetch = FetchType.LAZY)
	@JoinTable(name = "action_business_area", catalog = "qpulse_hes_demo", joinColumns = {
			@JoinColumn(name = "business_area_id", nullable = false, updatable = false) }, inverseJoinColumns = {
					@JoinColumn(name = "action_id", nullable = false, updatable = false) })
	public Set<Action> getActions() {
		return this.actions;
	}

	public void setActions(Set<Action> actions) {
		this.actions = actions;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "riskBusinessArea")
	public Set<RiskCategory> getRiskCategories() {
		return this.riskCategories;
	}

	public void setRiskCategories(Set<RiskCategory> riskCategories) {
		this.riskCategories = riskCategories;
	}

	@ManyToMany(fetch = FetchType.LAZY)
	@JoinTable(name = "doc_control_doc_business_area", catalog = "qpulse_hes_demo", joinColumns = {
			@JoinColumn(name = "business_area_id", nullable = false, updatable = false) }, inverseJoinColumns = {
					@JoinColumn(name = "document_id", nullable = false, updatable = false) })
	public Set<DocControlDoc> getDocControlDocs() {
		return this.docControlDocs;
	}

	public void setDocControlDocs(Set<DocControlDoc> docControlDocs) {
		this.docControlDocs = docControlDocs;
	}

	@ManyToMany(fetch = FetchType.LAZY)
	@JoinTable(name = "reading_business_area", catalog = "qpulse_hes_demo", joinColumns = {
			@JoinColumn(name = "business_area_id", nullable = false, updatable = false) }, inverseJoinColumns = {
					@JoinColumn(name = "reading_id", nullable = false, updatable = false) })
	public Set<MeasurementReading> getMeasurementReadings() {
		return this.measurementReadings;
	}

	public void setMeasurementReadings(Set<MeasurementReading> measurementReadings) {
		this.measurementReadings = measurementReadings;
	}*/

}
