package com.ideagen.qhse.orm.entity;

import java.sql.Date;
import java.sql.Timestamp;

import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.Table;

/**
 * Site generated by hbm2java
 */
@Entity
@Table(name = "site")
public class Site extends AbstractNamedEntity {
	
	private String schema;
	//TODO
	/*private Set<ProfileLegalMain> profileLegalMains = new HashSet<ProfileLegalMain>(0);
	private Set<SecGroup> secGroups = new HashSet<SecGroup>(0);
	private Set<ChangePlan> changePlans = new HashSet<ChangePlan>(0);
	private Set<RiskTemplate> riskTemplates = new HashSet<RiskTemplate>(0);
	private Set<SecSiteReportingGroup> secSiteReportingGroups = new HashSet<SecSiteReportingGroup>(0);
	private Set<ClientQuestionsOptionDependsOn> clientQuestionsOptionDependsOns = new HashSet<ClientQuestionsOptionDependsOn>(
			0);
	private Set<HealthRecord> healthRecords = new HashSet<HealthRecord>(0);
	private Set<RiskAssessment> riskAssessments = new HashSet<RiskAssessment>(0);
	private Set<Auditee> auditees = new HashSet<Auditee>(0);
	private Set<CauseType> causeTypes = new HashSet<CauseType>(0);
	private Set<MeasurementReadingPoint> measurementReadingPoints = new HashSet<MeasurementReadingPoint>(0);
	private Set<WasteType> wasteTypes = new HashSet<WasteType>(0);
	private Set<AuditProgrammeType> auditProgrammeTypes = new HashSet<AuditProgrammeType>(0);
	private Set<AuditPlan> auditPlans = new HashSet<AuditPlan>(0);
	private Set<CommonQuestionsOption> commonQuestionsOptions = new HashSet<CommonQuestionsOption>(0);
	private Set<DocControlGroup> docControlGroups = new HashSet<DocControlGroup>(0);
	private Set<ChangeProgrammeType> changeProgrammeTypes = new HashSet<ChangeProgrammeType>(0);
	private Set<HazardTask> hazardTasks = new HashSet<HazardTask>(0);
	private Set<ActionTask> actionTasks = new HashSet<ActionTask>(0);
	private Set<RiskObjective> riskObjectives = new HashSet<RiskObjective>(0);
	private Set<DocControlAudience> docControlAudiences = new HashSet<DocControlAudience>(0);
	private Set<RiskTask> riskTasks = new HashSet<RiskTask>(0);
	private Set<ActionJustification> actionJustifications = new HashSet<ActionJustification>(0);
	private Set<AuditProgramme> auditProgrammes = new HashSet<AuditProgramme>(0);
	private Set<Reportee> reportees = new HashSet<Reportee>(0);
	private Set<ChangeTemplate> changeTemplates = new HashSet<ChangeTemplate>(0);
	private Set<DocLinkCategory> docLinkCategories = new HashSet<DocLinkCategory>(0);
	private Set<DocumentLinkHolder> documentLinkHolders = new HashSet<DocumentLinkHolder>(0);
	private Set<AuditTemplateActiveSite> auditTemplateActiveSites = new HashSet<AuditTemplateActiveSite>(0);
	private Set<Help> helps = new HashSet<Help>(0);
	private Set<Trainee> trainees = new HashSet<Trainee>(0);
	private Set<ClientQuestionsOption> clientQuestionsOptions = new HashSet<ClientQuestionsOption>(0);
	private Set<ClientTemplateQuestion> clientTemplateQuestions = new HashSet<ClientTemplateQuestion>(0);
	private Set<Action> actions = new HashSet<Action>(0);
	private Set<IncidentType> incidentTypes = new HashSet<IncidentType>(0);
	private Set<MeasurementQuantityCategory> measurementQuantityCategories = new HashSet<MeasurementQuantityCategory>(
			0);
	private Set<ProfileChecklistTask> profileChecklistTasks = new HashSet<ProfileChecklistTask>(0);
	private Set<Incident> incidents = new HashSet<Incident>(0);
	private Set<RiskAssessmentRevision> riskAssessmentRevisions = new HashSet<RiskAssessmentRevision>(0);
	private Set<Notification> notifications = new HashSet<Notification>(0);
	private Set<GeneralQuickLink> generalQuickLinks = new HashSet<GeneralQuickLink>(0);
	private Set<RiskThreshold> riskThresholds = new HashSet<RiskThreshold>(0);
	private Set<ChangeHistory> changeHistories = new HashSet<ChangeHistory>(0);
	private Set<WasteConsignment> wasteConsignments = new HashSet<WasteConsignment>(0);
	private Set<MaintenanceRecord> maintenanceRecords = new HashSet<MaintenanceRecord>(0);*/
	
	@Column(name = "schema", length = 50)
	public String getSchema() {
		return this.schema;
	}

	public void setSchema(String schema) {
		this.schema = schema;
	}

	/*@OneToMany(fetch = FetchType.LAZY, mappedBy = "site")
	public Set<ProfileLegalMain> getProfileLegalMains() {
		return this.profileLegalMains;
	}

	public void setProfileLegalMains(Set<ProfileLegalMain> profileLegalMains) {
		this.profileLegalMains = profileLegalMains;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "site")
	public Set<SecGroup> getSecGroups() {
		return this.secGroups;
	}

	public void setSecGroups(Set<SecGroup> secGroups) {
		this.secGroups = secGroups;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "site")
	public Set<ChangePlan> getChangePlans() {
		return this.changePlans;
	}

	public void setChangePlans(Set<ChangePlan> changePlans) {
		this.changePlans = changePlans;
	}

	@ManyToMany(fetch = FetchType.LAZY)
	@JoinTable(name = "risk_template_active_site", catalog = "qpulse_hes_demo", joinColumns = {
			@JoinColumn(name = "site", nullable = false, updatable = false) }, inverseJoinColumns = {
					@JoinColumn(name = "risk_template_id", nullable = false, updatable = false) })
	public Set<RiskTemplate> getRiskTemplates() {
		return this.riskTemplates;
	}

	public void setRiskTemplates(Set<RiskTemplate> riskTemplates) {
		this.riskTemplates = riskTemplates;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "site")
	public Set<SecSiteReportingGroup> getSecSiteReportingGroups() {
		return this.secSiteReportingGroups;
	}

	public void setSecSiteReportingGroups(Set<SecSiteReportingGroup> secSiteReportingGroups) {
		this.secSiteReportingGroups = secSiteReportingGroups;
	}

	@ManyToMany(fetch = FetchType.LAZY)
	@JoinTable(name = "common_questions_option_depends_inactive_site", catalog = "qpulse_hes_demo", joinColumns = {
			@JoinColumn(name = "site", nullable = false, updatable = false) }, inverseJoinColumns = {
					@JoinColumn(name = "depends_on_option_id", nullable = false, updatable = false) })
	public Set<ClientQuestionsOptionDependsOn> getClientQuestionsOptionDependsOns() {
		return this.clientQuestionsOptionDependsOns;
	}

	public void setClientQuestionsOptionDependsOns(
			Set<ClientQuestionsOptionDependsOn> clientQuestionsOptionDependsOns) {
		this.clientQuestionsOptionDependsOns = clientQuestionsOptionDependsOns;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "site")
	public Set<HealthRecord> getHealthRecords() {
		return this.healthRecords;
	}

	public void setHealthRecords(Set<HealthRecord> healthRecords) {
		this.healthRecords = healthRecords;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "site")
	public Set<RiskAssessment> getRiskAssessments() {
		return this.riskAssessments;
	}

	public void setRiskAssessments(Set<RiskAssessment> riskAssessments) {
		this.riskAssessments = riskAssessments;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "site")
	public Set<Auditee> getAuditees() {
		return this.auditees;
	}

	public void setAuditees(Set<Auditee> auditees) {
		this.auditees = auditees;
	}

	@ManyToMany(fetch = FetchType.LAZY)
	@JoinTable(name = "cause_type_active_site", catalog = "qpulse_hes_demo", joinColumns = {
			@JoinColumn(name = "site", nullable = false, updatable = false) }, inverseJoinColumns = {
					@JoinColumn(name = "cause_type_id", nullable = false, updatable = false) })
	public Set<CauseType> getCauseTypes() {
		return this.causeTypes;
	}

	public void setCauseTypes(Set<CauseType> causeTypes) {
		this.causeTypes = causeTypes;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "site")
	public Set<MeasurementReadingPoint> getMeasurementReadingPoints() {
		return this.measurementReadingPoints;
	}

	public void setMeasurementReadingPoints(Set<MeasurementReadingPoint> measurementReadingPoints) {
		this.measurementReadingPoints = measurementReadingPoints;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "site")
	public Set<WasteType> getWasteTypes() {
		return this.wasteTypes;
	}

	public void setWasteTypes(Set<WasteType> wasteTypes) {
		this.wasteTypes = wasteTypes;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "site")
	public Set<AuditProgrammeType> getAuditProgrammeTypes() {
		return this.auditProgrammeTypes;
	}

	public void setAuditProgrammeTypes(Set<AuditProgrammeType> auditProgrammeTypes) {
		this.auditProgrammeTypes = auditProgrammeTypes;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "site")
	public Set<AuditPlan> getAuditPlans() {
		return this.auditPlans;
	}

	public void setAuditPlans(Set<AuditPlan> auditPlans) {
		this.auditPlans = auditPlans;
	}

	@ManyToMany(fetch = FetchType.LAZY)
	@JoinTable(name = "common_questions_option_inactive_site", catalog = "qpulse_hes_demo", joinColumns = {
			@JoinColumn(name = "site", nullable = false, updatable = false) }, inverseJoinColumns = {
					@JoinColumn(name = "option_id", nullable = false, updatable = false) })
	public Set<CommonQuestionsOption> getCommonQuestionsOptions() {
		return this.commonQuestionsOptions;
	}

	public void setCommonQuestionsOptions(Set<CommonQuestionsOption> commonQuestionsOptions) {
		this.commonQuestionsOptions = commonQuestionsOptions;
	}

	@ManyToMany(fetch = FetchType.LAZY)
	@JoinTable(name = "doc_control_group_active_site", catalog = "qpulse_hes_demo", joinColumns = {
			@JoinColumn(name = "site", nullable = false, updatable = false) }, inverseJoinColumns = {
					@JoinColumn(name = "doc_group_id", nullable = false, updatable = false) })
	public Set<DocControlGroup> getDocControlGroups() {
		return this.docControlGroups;
	}

	public void setDocControlGroups(Set<DocControlGroup> docControlGroups) {
		this.docControlGroups = docControlGroups;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "site")
	public Set<ChangeProgrammeType> getChangeProgrammeTypes() {
		return this.changeProgrammeTypes;
	}

	public void setChangeProgrammeTypes(Set<ChangeProgrammeType> changeProgrammeTypes) {
		this.changeProgrammeTypes = changeProgrammeTypes;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "site")
	public Set<HazardTask> getHazardTasks() {
		return this.hazardTasks;
	}

	public void setHazardTasks(Set<HazardTask> hazardTasks) {
		this.hazardTasks = hazardTasks;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "site")
	public Set<ActionTask> getActionTasks() {
		return this.actionTasks;
	}

	public void setActionTasks(Set<ActionTask> actionTasks) {
		this.actionTasks = actionTasks;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "site")
	public Set<RiskObjective> getRiskObjectives() {
		return this.riskObjectives;
	}

	public void setRiskObjectives(Set<RiskObjective> riskObjectives) {
		this.riskObjectives = riskObjectives;
	}

	@ManyToMany(fetch = FetchType.LAZY)
	@JoinTable(name = "doc_control_audience_site", catalog = "qpulse_hes_demo", joinColumns = {
			@JoinColumn(name = "site", nullable = false, updatable = false) }, inverseJoinColumns = {
					@JoinColumn(name = "aud_id", nullable = false, updatable = false) })
	public Set<DocControlAudience> getDocControlAudiences() {
		return this.docControlAudiences;
	}

	public void setDocControlAudiences(Set<DocControlAudience> docControlAudiences) {
		this.docControlAudiences = docControlAudiences;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "site")
	public Set<RiskTask> getRiskTasks() {
		return this.riskTasks;
	}

	public void setRiskTasks(Set<RiskTask> riskTasks) {
		this.riskTasks = riskTasks;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "site")
	public Set<ActionJustification> getActionJustifications() {
		return this.actionJustifications;
	}

	public void setActionJustifications(Set<ActionJustification> actionJustifications) {
		this.actionJustifications = actionJustifications;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "site")
	public Set<AuditProgramme> getAuditProgrammes() {
		return this.auditProgrammes;
	}

	public void setAuditProgrammes(Set<AuditProgramme> auditProgrammes) {
		this.auditProgrammes = auditProgrammes;
	}

	@ManyToMany(fetch = FetchType.LAZY)
	@JoinTable(name = "reportee_active_site", catalog = "qpulse_hes_demo", joinColumns = {
			@JoinColumn(name = "site", nullable = false, updatable = false) }, inverseJoinColumns = {
					@JoinColumn(name = "reportee_id", nullable = false, updatable = false) })
	public Set<Reportee> getReportees() {
		return this.reportees;
	}

	public void setReportees(Set<Reportee> reportees) {
		this.reportees = reportees;
	}

	@ManyToMany(fetch = FetchType.LAZY)
	@JoinTable(name = "change_template_active_site", catalog = "qpulse_hes_demo", joinColumns = {
			@JoinColumn(name = "site", nullable = false, updatable = false) }, inverseJoinColumns = {
					@JoinColumn(name = "change_template_id", nullable = false, updatable = false) })
	public Set<ChangeTemplate> getChangeTemplates() {
		return this.changeTemplates;
	}

	public void setChangeTemplates(Set<ChangeTemplate> changeTemplates) {
		this.changeTemplates = changeTemplates;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "site")
	public Set<DocLinkCategory> getDocLinkCategories() {
		return this.docLinkCategories;
	}

	public void setDocLinkCategories(Set<DocLinkCategory> docLinkCategories) {
		this.docLinkCategories = docLinkCategories;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "site")
	public Set<DocumentLinkHolder> getDocumentLinkHolders() {
		return this.documentLinkHolders;
	}

	public void setDocumentLinkHolders(Set<DocumentLinkHolder> documentLinkHolders) {
		this.documentLinkHolders = documentLinkHolders;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "site")
	public Set<AuditTemplateActiveSite> getAuditTemplateActiveSites() {
		return this.auditTemplateActiveSites;
	}

	public void setAuditTemplateActiveSites(Set<AuditTemplateActiveSite> auditTemplateActiveSites) {
		this.auditTemplateActiveSites = auditTemplateActiveSites;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "site")
	public Set<Help> getHelps() {
		return this.helps;
	}

	public void setHelps(Set<Help> helps) {
		this.helps = helps;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "site")
	public Set<Trainee> getTrainees() {
		return this.trainees;
	}

	public void setTrainees(Set<Trainee> trainees) {
		this.trainees = trainees;
	}

	@ManyToMany(fetch = FetchType.LAZY)
	@JoinTable(name = "client_questions_option_inactive_site", catalog = "qpulse_hes_demo", joinColumns = {
			@JoinColumn(name = "site", nullable = false, updatable = false) }, inverseJoinColumns = {
					@JoinColumn(name = "option_id", nullable = false, updatable = false) })
	public Set<ClientQuestionsOption> getClientQuestionsOptions() {
		return this.clientQuestionsOptions;
	}

	public void setClientQuestionsOptions(Set<ClientQuestionsOption> clientQuestionsOptions) {
		this.clientQuestionsOptions = clientQuestionsOptions;
	}

	@ManyToMany(fetch = FetchType.LAZY)
	@JoinTable(name = "template_question_inactive_site", catalog = "qpulse_hes_demo", joinColumns = {
			@JoinColumn(name = "site", nullable = false, updatable = false) }, inverseJoinColumns = {
					@JoinColumn(name = "template_question_id", nullable = false, updatable = false) })
	public Set<ClientTemplateQuestion> getClientTemplateQuestions() {
		return this.clientTemplateQuestions;
	}

	public void setClientTemplateQuestions(Set<ClientTemplateQuestion> clientTemplateQuestions) {
		this.clientTemplateQuestions = clientTemplateQuestions;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "site")
	public Set<Action> getActions() {
		return this.actions;
	}

	public void setActions(Set<Action> actions) {
		this.actions = actions;
	}

	@ManyToMany(fetch = FetchType.LAZY)
	@JoinTable(name = "incident_type_active_site", catalog = "qpulse_hes_demo", joinColumns = {
			@JoinColumn(name = "site", nullable = false, updatable = false) }, inverseJoinColumns = {
					@JoinColumn(name = "incident_type_id", nullable = false, updatable = false) })
	public Set<IncidentType> getIncidentTypes() {
		return this.incidentTypes;
	}

	public void setIncidentTypes(Set<IncidentType> incidentTypes) {
		this.incidentTypes = incidentTypes;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "site")
	public Set<MeasurementQuantityCategory> getMeasurementQuantityCategories() {
		return this.measurementQuantityCategories;
	}

	public void setMeasurementQuantityCategories(Set<MeasurementQuantityCategory> measurementQuantityCategories) {
		this.measurementQuantityCategories = measurementQuantityCategories;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "site")
	public Set<ProfileChecklistTask> getProfileChecklistTasks() {
		return this.profileChecklistTasks;
	}

	public void setProfileChecklistTasks(Set<ProfileChecklistTask> profileChecklistTasks) {
		this.profileChecklistTasks = profileChecklistTasks;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "site")
	public Set<Incident> getIncidents() {
		return this.incidents;
	}

	public void setIncidents(Set<Incident> incidents) {
		this.incidents = incidents;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "site")
	public Set<RiskAssessmentRevision> getRiskAssessmentRevisions() {
		return this.riskAssessmentRevisions;
	}

	public void setRiskAssessmentRevisions(Set<RiskAssessmentRevision> riskAssessmentRevisions) {
		this.riskAssessmentRevisions = riskAssessmentRevisions;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "site")
	public Set<Notification> getNotifications() {
		return this.notifications;
	}

	public void setNotifications(Set<Notification> notifications) {
		this.notifications = notifications;
	}

	@ManyToMany(fetch = FetchType.LAZY)
	@JoinTable(name = "quick_link_active_site", catalog = "qpulse_hes_demo", joinColumns = {
			@JoinColumn(name = "site", nullable = false, updatable = false) }, inverseJoinColumns = {
					@JoinColumn(name = "quick_link_id", nullable = false, updatable = false) })
	public Set<GeneralQuickLink> getGeneralQuickLinks() {
		return this.generalQuickLinks;
	}

	public void setGeneralQuickLinks(Set<GeneralQuickLink> generalQuickLinks) {
		this.generalQuickLinks = generalQuickLinks;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "site")
	public Set<RiskThreshold> getRiskThresholds() {
		return this.riskThresholds;
	}

	public void setRiskThresholds(Set<RiskThreshold> riskThresholds) {
		this.riskThresholds = riskThresholds;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "site")
	public Set<ChangeHistory> getChangeHistories() {
		return this.changeHistories;
	}

	public void setChangeHistories(Set<ChangeHistory> changeHistories) {
		this.changeHistories = changeHistories;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "site")
	public Set<WasteConsignment> getWasteConsignments() {
		return this.wasteConsignments;
	}

	public void setWasteConsignments(Set<WasteConsignment> wasteConsignments) {
		this.wasteConsignments = wasteConsignments;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "site")
	public Set<MaintenanceRecord> getMaintenanceRecords() {
		return this.maintenanceRecords;
	}

	public void setMaintenanceRecords(Set<MaintenanceRecord> maintenanceRecords) {
		this.maintenanceRecords = maintenanceRecords;
	}*/

}
